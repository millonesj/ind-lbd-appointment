service: ind-appointment

frameworkVersion: '4'

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  memorySize: 190
  timeout: 15
  environment:
    DYNAMO_REGION: ${env:DYNAMO_REGION}
    APPOINTMENTS_TABLE: AppointmentsTable
    SNS_TOPIC_ARN: 
      Ref: AppointmentTopic

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - sns:Publish
      Resource: "*"

functions:
  appointment:
    handler: dist/serverless.handler
    events:
      - http:
          path: appointments
          method: post
      - http:
          path: appointments/insured/{insuredId}
          method: get
      - sqs:
          arn: !GetAtt AppointmentStatusQueue.Arn
          batchSize: 1  # Procesa un mensaje a la vez para mejor control
          maximumBatchingWindow: 30

resources:
  Resources:

    ## DynamoDB Table
    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AppointmentsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: insuredId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: insuredId-index
            KeySchema:
              - AttributeName: insuredId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    ## SNS Topic
    AppointmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: AppointmentTopic

    ## SQS Queues
    SQSPEQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_PE
    SQSCLQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_CL
    # Cola SQS para estados
    AppointmentStatusQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: AppointmentStatusQueue

    # EventBridge (Event Bus)
    AppointmentEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: AppointmentEventBus  # Nombre personalizado para tu bus de eventos

    # Reglas de EventBridge
    # EventBridge para PE
    PEEventBridgeRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref AppointmentEventBus
        Name: PEStatusUpdates
        EventPattern:
          source: ["appointment_pe.service"]
          detail-type: ["AppointmentConfirmationPE"]
        Targets:
          - Arn: !GetAtt AppointmentStatusQueue.Arn
            Id: "PEStatusTarget"
     # EventBridge para CL
    CLEventBridgeRule:
      Type: AWS::Events::Rule
      Properties:
        EventBusName: !Ref AppointmentEventBus
        Name: CLStatusUpdates
        EventPattern:
          source: ["appointment_cl.service"]
          detail-type: ["AppointmentConfirmation"]
        Targets:
          - Arn: !GetAtt AppointmentStatusQueue.Arn
            Id: "CLStatusTarget"
            InputTransformer:
              InputPathsMap:
                id: "$.detail.appointmentId"
                status: "$.detail.status"
              InputTemplate: '{"appointmentId": <id>, "status": <status>, "country": "CL"}'

    ## SNS Subscription to SQS_PE (con filtro por país)
    SNSSubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: AppointmentTopic
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [SQSPEQueue, Arn]
        FilterPolicy:
          countryISO:
            - PE
    SNSSubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: AppointmentTopic
        Protocol: sqs
        Endpoint:
          Fn::GetAtt: [SQSCLQueue, Arn]
        FilterPolicy:
          countryISO:
            - CL

    # Permisos para que EventBridge pueda escribir en SQS
    EventBridgeToSQSPermission:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref AppointmentStatusQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com  # Permite a EventBridge por SQS
              Action: sqs:SendMessage          # Enviar mensajes
              Resource: !GetAtt AppointmentStatusQueue.Arn # A esta cola específica

  Outputs:
    AppointmentApi:
      Description: "API Gateway endpoint URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${sls:stage}/"
package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - node_modules/@types/**
    - node_modules/aws-sdk/**
    - node_modules/typescript/**